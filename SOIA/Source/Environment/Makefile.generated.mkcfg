##################################################
#
# DO NOT EDIT THIS FILE!
#
# This is an automatically generated makefile configuration
# for a single Project. To edit the global template for this
# configuration please change 'Makefile.template.mkcfg' in your 
# solution's top folder 
#
##################################################

include Project.mkcfg

# \/ Including project configuration & possible dependency-projects
ifneq ("$(PROJECT_DEPENDENCY)","")
	PROJECTINCLUDE_DIRS := $(addprefix $(SOLUTION_DIR)Source/,$(PROJECT_DEPENDENCY))
	PROJECTINCLUDES := $(addsuffix /Project.mkcfg,$(PROJECTINCLUDE_DIRS))
endif

# \/ main directories
SOURCE_DIR = $(SOLUTION_DIR)Source/$(PROJECT_SUBDIR)$(PROJECT_NAME)/
INTERMEDIATE_DIR = $(SOLUTION_DIR)Intermediate/$(PROJECT_SUBDIR)$(PROJECT_NAME)/
BINARY_DIR = $(SOLUTION_DIR)Binaries/

# \/ CC & FLAGS
GCC = g++
MSVC = cl.exe

CFLAGS = -Ddef_BUILD_PROJECTNAME=$(PROJECT_NAME) 
GCC_CFLAGS = -Ddef_BUILD_COMPILER_GCC $(EXTRA_GCC_FLAGS) -m64 -g -std=gnu++11 -pthread -fpermissive -w -Lc:/MinGW/lib -isystemC:\MinGW\include\c++\4.8.2 -isystemC:\MinGW\include\c++\4.8.2\backward -isystemC:\MinGW\include\c++\4.8.2\x86_64-w64-mingw32 -isystemC:\MinGW\mingw\include -isystemC:\MinGW\lib64\gcc\x86_64-w64-mingw32\4.8.2\include -isystemC:\MinGW\lib64\gcc\x86_64-w64-mingw32\4.8.2\include-fixed
MSVC_CFLAGS = -Ddef_BUILD_COMPILER_MSVC $(EXTRA_MSVC_FLAGS) -Zi -nologo -EHsc  -Od

# \/ Prepare linking command (decide whether to build a shared library, 
#    a static library, or an executable)

ifdef def_IDE_VisualStudio
	CC = $(MSVC)
	CFLAGS += $(MSVC_CFLAGS)
	COMPILER_INFILE = $$<
	COMPILER_OUTFILE = -Fo$$@
	
	LINKER = $(MSVC_LINKER)
	LINKER_ARG_FLAGS = $(MSVC_LINKER_ARG_FLAGS)
	LINKER_ARG_OUT = $(MSVC_LINKER_ARG_OUT)
	LINKER_ARG_LIBS = $(MSVC_LINKER_ARG_LIBS)
else
	CC = $(GCC)
	CFLAGS += $(GCC_CFLAGS)
	COMPILER_INFILE = $$<
	COMPILER_OUTFILE = -o $$@
	
	LINKER = $(GCC_LINKER)
	LINKER_ARG_FLAGS = $(GCC_LINKER_ARG_FLAGS)
	LINKER_ARG_OUT = $(GCC_LINKER_ARG_OUT)
	LINKER_ARG_LIBS = $(GCC_LINKER_ARG_LIBS)
endif




# set target name
TARGET = $(BINARY_DIR)$(PROJECT_NAME).$(TARGET_EXT)

# set linker and main args
ifeq ($(TARGET_ROLE),Executable)
	TARGET_EXT := exe
	
	GCC_LINKER := $(CC)
	GCC_LINKER_ARG_FLAGS := $(CFLAGS)
	GCC_LINKER_ARG_OUT := -o $(TARGET)
	
	MSVC_LINKER := $(MSVC)
	MSVC_LINKER_ARG_FLAGS := $(CFLAGS)
	MSVC_LINKER_ARG_OUT := -Fe$(TARGET)
else
	ifeq ($(TARGET_ROLE),SharedLibrary)
		TARGET_EXT := dll
		
		GCC_LINKER := $(CC)
		GCC_LINKER_ARG_FLAGS := $(CFLAGS) -shared
		GCC_LINKER_ARG_OUT := -o $(TARGET) -Wl,--out-implib,$(subst .dll,.lib,$(TARGET))
		
		MSVC_LINKER := $(MSVC)
		MSVC_LINKER_ARG_FLAGS := $(CFLAGS) -LD
		MSVC_LINKER_ARG_OUT := -Fe$(TARGET)
	else
		TARGET_EXT := lib
		GCCLINKER := ar
		GCCLINKER_ARG_FLAGS :=  rvs
		GCCLINKER_ARG_OUT := $(TARGET)
	endif
endif

# set included libs (LIB_NAMES are set in include-public-modules)
LIB_DIRS := $(BINARY_DIR)
GCC_LINKER_ARG_LIBS = $(addprefix -L,$(LIB_DIRS)) $(addprefix -l,$(LIB_NAMES) $(EXTRA_LIBNAMES))
MSVC_LINKER_ARG_LIBS = $(patsubst %,$(BINARY_DIR)%.lib,$(LIB_NAMES)) $(addsuffix .lib,$(EXTRA_LIBNAMES))


##############################################################
# FUNCTIONS

# variable definitions
COMPLETE_PRIVATE_MODULES :=
COMPLETE_PUBLIC_MODULES :=
LIB_NAMES :=

# include modules
define include-local-modules
$(eval include Project.mkcfg)
$(eval COMPLETE_LOCAL_MODULES += $(patsubst %,$(PROJECT_SUBDIR)$(PROJECT_NAME)/%/,$(MODULES)))
endef

define include-public-modules
$(eval include $1)
$(eval COMPLETE_PUBLIC_MODULES += $(patsubst %,$(PROJECT_SUBDIR)$(PROJECT_NAME)/%/,$(MODULES)))
$(eval LIB_NAMES += $(PROJECT_NAME))
endef

# creating obj and executable dirs
define set-object-dirs
$(eval LOCAL_MODULE_DIRS := $(addprefix $(SOLUTION_DIR)Source/,$(COMPLETE_LOCAL_MODULES)))
$(eval PUBLIC_MODULE_DIRS := $(addprefix $(SOLUTION_DIR)Source/,$(COMPLETE_PUBLIC_MODULES)))

$(eval CPP_DIRS := $(addsuffix Private/,$(LOCAL_MODULE_DIRS)))
$(eval LOCAL_H_DIRS := $(addsuffix Classes/,$(LOCAL_MODULE_DIRS)))
$(eval PUBLIC_H_DIRS := $(addsuffix Public/,$(LOCAL_MODULE_DIRS) $(PUBLIC_MODULE_DIRS)))

$(eval CPPS := $(foreach sdir,$(CPP_DIRS),$(wildcard $(sdir)**.cpp)))
$(eval OBJS := $(patsubst $(SOURCE_DIR)%.cpp,$(INTERMEDIATE_DIR)%.obj,$(subst /Private/,/,$(CPPS))))
$(eval INCLUDES := $(addprefix -I,$(LOCAL_H_DIRS) $(PUBLIC_H_DIRS) $(SOLUTION_DIR)Source/ ))

$(eval OBJ_DIRS := $(sort $(dir $(OBJS))))

vpath %.cpp $(CPP_DIRS)
endef
