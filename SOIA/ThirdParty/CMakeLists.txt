cmake_minimum_required(VERSION 3.1)

macro( prepare_thirdparty_directories L_project_name )
	set(L_build_dir "${CMAKE_CURRENT_LIST_DIR}/Build_${L_project_name}")
	set(L_project_dir "${CMAKE_CURRENT_LIST_DIR}/${L_project_name}")
	set(L_install_dir "${CMAKE_BINARY_DIR}/Install/ThirdParty")
	file(MAKE_DIRECTORY "${L_build_dir}")
endmacro( prepare_thirdparty_directories L_project_name )

function( add_thirdparty_custom L_project_name )
	
	prepare_thirdparty_directories(${L_project_name})
	
	foreach( L_command ${ARGN})
		string(REPLACE " "
		   ";" L_corrected_command
			${L_command})
		list(APPEND L_commands COMMAND ${L_corrected_command})
	endforeach()



	add_custom_command (
		DEPENDS /L_project_name/
		OUTPUT ${L_build_dir}/custom_command.txt
		COMMAND echo "Building custom thirdparty project in: ${L_project_dir}"
		COMMAND cd "${L_project_dir}"
		COMMAND echo "commands are: ${L_commands}"
		${L_commands}
		COMMAND cd "${L_build_dir}"
		COMMAND echo "generated by ThirdParty/CMakeLists.txt" > custom_command.txt
	)

	add_custom_target(
		Build_${L_project_name} ALL
		DEPENDS ${L_build_dir}/custom_command.txt
	)

endfunction( add_thirdparty_custom L_project_name L_build_command )


function( add_thirdparty_cmake L_project_name )

	prepare_thirdparty_directories(${L_project_name})

	add_custom_command (
		DEPENDS /L_project_name/CMakeLists.txt
		OUTPUT ${L_build_dir}/CMakeCache.txt
		COMMAND echo "Building cmake thirdparty project in: ${L_build_dir}"
		COMMAND cd "${L_build_dir}"
		COMMAND cmake -DCMAKE_INSTALL_PREFIX:PATH="${L_install_dir}" -G "Visual Studio 14 2015" ../${L_project_name}
		COMMAND cmake --build ./ --target install
	)

	add_custom_target(
		Build_${L_project_name} ALL
		DEPENDS ${L_build_dir}/CMakeCache.txt
	)
endfunction( add_thirdparty_cmake L_project_name )


project(Build_ThirdParty)
	add_thirdparty_cmake(unittest-cpp)
	add_thirdparty_custom(cppcheck "make" "make install BIN=${CMAKE_BINARY_DIR}/Install/ThirdParty/bin")

	