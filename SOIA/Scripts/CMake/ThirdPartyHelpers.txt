
cmake_minimum_required(VERSION 3.1)

##################################################################################
# macros used to make thirdparty project build and integration easier
##################################################################################


###########################################
# 1. Prepare directories

macro( make_thirdparty_directories )
	file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/Install/ThirdParty/bin" )
	file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/Install/ThirdParty/lib" )
	file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/Install/ThirdParty/include" )
endmacro( make_thirdparty_directories )


###########################################
# 2. Generate build scripts to be executed
#	at build time

macro( generate_build_script_custom L_project_name )
	prepare_thirdparty_project(${L_project_name})
	set(L_all_commands "cp -r -T ${L_project_dir}/ ${L_build_dir}/")
	foreach(L_single_command ${ARGN} )
		list(APPEND L_all_commands ${L_single_command} )
	endforeach() 
	generate_build_script( ${L_project_name} ${L_all_commands} )
endmacro()

macro( generate_build_script_cmake L_project_name )
	prepare_thirdparty_project( ${L_project_name} )
	unset(L_all_commands)
	list(APPEND L_all_commands
		"cmake -DCMAKE_INSTALL_PREFIX:PATH=${L_install_dir} -G \"${CMAKE_GENERATOR}\" ${L_project_dir}"
		"cmake --build ./ --target install" )
	generate_build_script( ${L_project_name} ${L_all_commands} )
endmacro()


###########################################
# 3. create commands and targets to run
#	custom scripts

macro( add_thirdparty_script_build L_project_name)
	prepare_thirdparty_project(${L_project_name})

	add_custom_command (
		DEPENDS 
		OUTPUT ${L_build_dir}/thirdparty_project_success.txt
		WORKING_DIR ${L_build_dir}
		COMMAND bash ${L_script})
		
	add_target_and_dependencies()
endmacro( add_thirdparty_script_build)


###########################################
# 4. set build success variable, so that
#	SOIA projects can be build

function( set_thirdparty_success )
	prepare_thirdparty_project(ThirdPartySuccess)
	add_custom_command (
		OUTPUT ${L_build_dir}/thirdparty_project_success.txt
		COMMAND cd ${CMAKE_BINARY_DIR}
		COMMAND cmake -DTHIRDPARTY_SUCCESS=TRUE .
		COMMAND cd "${L_build_dir}"
		COMMAND echo Generated by ThirdParty/CMakeLists.txt > thirdparty_project_success.txt)
	add_target_and_dependencies()
	set(THIRDPARTY_SUCCESS_TARGET ${L_project_name} CACHE INTERNAL "File generated on successful thirdparty project build.")
endfunction( set_thirdparty_success )

##################################################################################
# helper macros used in this file
##################################################################################

macro( prepare_thirdparty_project L_project_name )
	set(L_project_name ${L_project_name})
	set(L_build_dir "${CMAKE_BINARY_DIR}/ThirdParty/InternalBuild_${L_project_name}")
	set(L_project_dir "${CMAKE_CURRENT_LIST_DIR}/${L_project_name}")
	set(L_install_dir "${CMAKE_BINARY_DIR}/Install/ThirdParty")
	set(L_script "${L_build_dir}/Build_${L_project_name}.sh")
	file(MAKE_DIRECTORY "${L_build_dir}")
	message(STATUS "== ThirdParty ==")
	message(STATUS "=  Preparing project: ${L_project_name}")
	message(STATUS "=  project_dir: ${L_project_dir}")
	message(STATUS "=  build_dir: ${L_build_dir}")
	message(STATUS "=  depends on: ${LAST_THIRDPARTY_PROJECT}")
endmacro( prepare_thirdparty_project L_project_name )

macro( add_target_and_dependencies )
	add_custom_target(${L_project_name} ALL DEPENDS ${LAST_THIRDPARTY_PROJECT} "${L_build_dir}/thirdparty_project_success.txt")
	set_target_properties( ${L_project_name} PROPERTIES FOLDER "ThirdParty" )
	if (NOT "${LAST_THIRDPARTY_PROJECT}" STREQUAL "")
		add_dependencies( ${L_project_name} "${LAST_THIRDPARTY_PROJECT}" )
	endif()
	set(LAST_THIRDPARTY_PROJECT "${L_project_name}")
endmacro( add_target_and_dependencies )


#####################
# Generic build script generation

macro( generate_build_script L_project_name)
	file(WRITE ${L_script} "\#!/bin/bash
echo == Building ${L_project_name} == \\
	&& cd ${L_build_dir} \\" )
	foreach( L_command ${ARGN})
	
		file(APPEND ${L_script} "
	&& ${L_command} \\")
	endforeach()
	
	file(APPEND ${L_script} "
	&& cd ${L_build_dir} \\
	&& echo Generated by ThirdParty/CMakeLists.txt > thirdparty_project_success.txt \\
	&& echo == Build successful ==")
endmacro( generate_build_script )

