########################################################################
# global rules for SOIA
########################################################################

# \/ settings for compiler (overriden if specifying IDE)
CC = g++
CFLAGS = -m64 -g -std=gnu++11 -pthread -Lc:/MinGW/lib -isystemC:\MinGW\include\c++\4.8.2 -isystemC:\MinGW\include\c++\4.8.2\backward -isystemC:\MinGW\include\c++\4.8.2\x86_64-w64-mingw32 -isystemC:\MinGW\mingw\include -isystemC:\MinGW\lib64\gcc\x86_64-w64-mingw32\4.8.2\include -isystemC:\MinGW\lib64\gcc\x86_64-w64-mingw32\4.8.2\include-fixed
CLFLAGS = -Zi
# -static-libgcc

# \/ relative paths from this file
BINDIR = Debug/
SRCDIR = src/

# \/ directories of cpp and h files
VPATH = $(SRCDIR)Definitions/ \
	$(SRCDIR)SO_SysInterface/ \
	$(SRCDIR)SO_SysInterface/Base/ $(SRCDIR)SO_SysInterface/Windows $(SRCDIR)SO_SysInterface/Ubuntu/ \
	$(SRCDIR)SO_Service/Console/ \
	$(SRCDIR)SO_UI/Information/ $(SRCDIR)SO_UI/Explorer \
	$(SRCDIR)IA_Game/Framework/ $(SRCDIR)IA_Game/Applied/ $(SRCDIR)IA_Engine/Framework/ $(SRCDIR)IA_Engine/Applied/ $(SRCDIR)IA_Engine/Modules/ \
	$(SRCDIR)IA_MeaningStream/SDL/ $(SRCDIR)IA_MeaningStream/ExtendedData/ \
	$(SRCDIR)SO_Drawing/DataStructs/ $(SRCDIR)SO_Drawing/ControlElements/ \
	$(SRCDIR)ZABS_Math/DataStructs/ $(SRCDIR)ZABS_Math/Random/

# \/ directories for '#include' statements in code (with '-I' prefix)
INCLUDES = $(subst $(SRCDIR),-I$(SRCDIR),$(VPATH))

# \/ one .obj file for every compiled .cpp file
OBJS = $(BINDIR)main.obj $(BINDIR)ConsoleService.obj $(BINDIR)Game.obj $(BINDIR)Thread.obj $(BINDIR)Window_Base.obj $(BINDIR)Engine.obj $(BINDIR)IA_SSt.obj $(BINDIR)Game_SSt.obj \
				$(BINDIR)Vector2D.obj $(BINDIR)Random.obj \
				$(BINDIR)pxPoint.obj $(BINDIR)fPoint.obj $(BINDIR)cPoint.obj $(BINDIR)fColor.obj \
				$(BINDIR)fCanvasObject.obj $(BINDIR)Control.obj $(BINDIR)CCanvas.obj $(BINDIR)CTextBox.obj \
				$(BINDIR)DebugVisual.obj \
				$(BINDIR)ExData.obj $(BINDIR)DEGraph.obj $(BINDIR)DataExplorer.obj \
				$(BINDIR)Window.obj

# excluded files: $(BINDIR)Data.obj $(BINDIR)Data_StatedState.obj 

# \/ name of executable
EXEC = $(BINDIR)SOIA.exe

#------------------------- windows only -------------------------
# \/ Windows based .cpp/.obj files
ifeq ($(OS),Windows_NT)
	OBJS += $(BINDIR)Window_Win.obj
	LIBS += -lgdi32
	CFLAGS += -D def_OSWindows
	CLFLAGS += -Ddef_OSWindows
#-------------------------- linux only -----------------------------
else
	UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
    	OBJS += $(BINDIR)Window_Ubu.obj
    	LIBS +=  $(BINDIR)libX11.so
    	#LIBS +=  /usr/lib/x86_64-linux-gnu/libX11.so
        CFLAGS += -D def_OSUbuntu
    endif
endif




# \/ Windows include paths
#INCLUDES += -I